import dataclasses
import json
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path

import requests
from bs4 import BeautifulSoup
from ncatbot.core.message import GroupMessage, PrivateMessage
from ncatbot.plugin import BasePlugin, CompatibleEnrollment

from utils import scheduler

bot = CompatibleEnrollment  # ÂÖºÂÆπÂõûË∞ÉÂáΩÊï∞Ê≥®ÂÜåÂô®


def get_trending():
    current_hour = datetime.now().strftime("%Y-%m-%d-%H")
    file_path = Path(__file__).parent / "trending" / f"{current_hour}.json"
    try:
        if file_path.exists():
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
                result = "üî• GitHub Trending ÁÉ≠Èó®È°πÁõÆ üî•\n\n"
                for idx, item in enumerate(data, 1):
                    project = Project.from_dict(item)
                    # ÂàÜÈöîÁ∫ø
                    if idx > 1:
                        result += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"

                    # È°πÁõÆÂêçÁß∞ÂíåÂ∫èÂè∑
                    result += f"{idx}. {project.owner}/{project.repo}\n"
                    # È°πÁõÆÈìæÊé•
                    result += f"üìé {project.url}\n"
                    # ÊòüÊòüÂíå‰ªäÊó•Êñ∞Â¢û
                    result += f"‚≠ê {project.stars:,} (‰ªäÊó• +{project.today_stars})"
                    # ËØ≠Ë®Ä
                    if project.language:
                        result += f" | üî† {project.language}"
                    # ÂàÜÂèâÊï∞
                    result += f" | üç¥ {project.forks:,}\n"
                    # È°πÁõÆÊèèËø∞
                    if project.description:
                        result += f"üìù {project.description}\n"

                    result += "\n"
                return result
        return "‚ö†Ô∏è ÂΩìÂâçÊöÇÊó† GitHub Trending Êï∞ÊçÆ\nËØ∑Á®çÂêéÂÜçËØï"
    except Exception as e:
        print(f"Ëé∑ÂèñTrendingÊï∞ÊçÆÂ§±Ë¥•: {str(e)}")
        return "‚ùå ËØªÂèñ GitHub Trending Êï∞ÊçÆÂ§±Ë¥•"


class GithubPlugin(BasePlugin):
    name = "GithubPlugin"  # Êèí‰ª∂ÂêçÁß∞
    version = "0.0.1"  # Êèí‰ª∂ÁâàÊú¨

    async def on_load(self):
        # Êèí‰ª∂Âä†ËΩΩÊó∂ÊâßË°åÁöÑÊìç‰Ωú, ÂèØÁº∫ÁúÅ
        print(f"{self.name} Êèí‰ª∂Â∑≤Âä†ËΩΩ")
        print(f"Êèí‰ª∂ÁâàÊú¨: {self.version}")
        scheduler.add_task(self.get_trending_task, 60 * 60)

    @bot.group_event()
    async def on_group_event(self, msg: GroupMessage):
        if msg.raw_message == "Github":
            await self.api.post_group_msg(
                msg.group_id, text="Ncatbot GitHub Êèí‰ª∂ÊµãËØïÊàêÂäüÂñµ"
            )
        elif msg.raw_message == "Github Trending":
            await self.api.post_group_msg(msg.group_id, text=get_trending())

    @bot.private_event()
    async def on_private_event(self, msg: PrivateMessage):
        if msg.raw_message == "Github":
            await self.api.post_private_msg(
                msg.user_id, text="Ncatbot GitHub Êèí‰ª∂ÊµãËØïÊàêÂäüÂñµ"
            )
        elif msg.raw_message == "Github Trending":
            await self.api.post_private_msg(msg.user_id, text=get_trending())

    def get_trending_task(self):
        try:
            response = requests.get("https://github.com/trending")
            response.raise_for_status()
            data = self.parse_github_projects(response.text)
            filename = datetime.now().strftime("%Y-%m-%d-%H.json")
            filepath = Path(__file__).parent / "trending" / filename
            with open(filepath, "w", encoding="utf-8") as f:
                json_data = [project.to_dict() for project in data]
                json.dump(json_data, f, indent=2, ensure_ascii=False)
            print(f"ÊàêÂäü‰øùÂ≠ò {len(data)} ‰∏™ Trending È°πÁõÆ")
            return True
        except Exception as e:
            print(f"Ëé∑ÂèñTrendingÊï∞ÊçÆÂ§±Ë¥•: {str(e)}")
            return False

    def parse_github_projects(self, html):
        try:
            soup = BeautifulSoup(html, "html.parser")
            trending_items = soup.select("div[data-hpc] article.Box-row")
            projects = []
            for item in trending_items:
                projects.append(Project.from_element(item))
            return projects
        except Exception as e:
            print(f"Error parsing GitHub trending: {e}")
            return []


@dataclass
class Project:
    owner: str
    repo: str
    description: str
    language: str
    stars: int
    forks: int
    today_stars: int
    url: str

    def to_dict(self):
        return dataclasses.asdict(self)

    @classmethod
    def from_dict(cls, data: dict) -> "Project":
        return cls(
            owner=data.get("owner", ""),
            repo=data.get("repo", ""),
            description=data.get("description", ""),
            language=data.get("language", ""),
            stars=data.get("stars", 0),
            forks=data.get("forks", 0),
            today_stars=data.get("today_stars", 0),
            url=data.get("url", ""),
        )

    @classmethod
    def from_element(cls, element) -> "Project":
        """‰ªéHTMLÂÖÉÁ¥†Ëß£ÊûêÈ°πÁõÆÊï∞ÊçÆ"""
        try:
            owner_repo = element.select_one("h2 a").text.strip().split("/")
            stars = element.select_one('a[href$="/stargazers"]').text.strip()
            forks = element.select_one('a[href$="/forks"]').text.strip()
            today_stars = (
                element.select_one("span.d-inline-block.float-sm-right").text.strip()
                if element.select_one("span.d-inline-block.float-sm-right")
                else "0"
            )

            return cls(
                owner=owner_repo[0].strip(),
                repo=owner_repo[1].strip(),
                description=(
                    element.select_one("p").text.strip()
                    if element.select_one("p")
                    else ""
                ),
                language=(
                    element.select_one("[itemprop='programmingLanguage']").text.strip()
                    if element.select_one("[itemprop='programmingLanguage']")
                    else ""
                ),
                stars=int(stars.replace(",", "")),
                forks=int(forks.replace(",", "")),
                today_stars=int("".join(filter(str.isdigit, today_stars)) or 0),
                url=f"https://github.com{element.select_one('h2 a')['href']}",
            )
        except Exception as e:
            print(f"Error parsing project element: {e}")
            return cls(
                owner="",
                repo="",
                description="",
                language="",
                stars=0,
                forks=0,
                today_stars=0,
                url="",
            )
